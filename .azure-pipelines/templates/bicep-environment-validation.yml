parameters:
- name: dependsOn
  type: object
  default: []
- name: azureSubscription
  type: string
- name: environment
  type: string
- name: environmentName
  type: string

jobs:
- deployment: validate_bicep_against_${{ parameters.environmentName }}_environment
  dependsOn: ${{ parameters.dependsOn }}
  environment: ${{ parameters.environment }}

  workspace:
    clean: all

  strategy:
    runOnce:
      deploy:
        steps:
          - checkout: self

          - task: AzureCLI@2
            name: RunPreflightValidation
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $config = (Get-Content ./params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                $keyVaults = az keyvault list --query '[].id' | ConvertFrom-Json
                $existing = $keyVaults | where {$_ -match "rg-platform-vault-${{ parameters.environmentName }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

                if ($null -ne $existing) { 
                  az deployment sub validate `
                    --name 'strategicPlatform${{ parameters.environmentName }}' `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.parLocation.value `
                    --parameters @params/platform.${{ parameters.environmentName }}.json `
                      parKeyVaultCreateMode='recover'
                }

          - task: AzureCLI@2
            name: RunWhatIfDeploy
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $config = (Get-Content ./params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                $keyVaults = az keyvault list --query '[].id' | ConvertFrom-Json
                $existing = $keyVaults | where {$_ -match "rg-platform-vault-${{ parameters.environmentName }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

                if ($null -ne $existing) { 
                  az deployment sub what-if `
                    --name 'strategicPlatform${{ parameters.environmentName }}' `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.parLocation.value `
                    --parameters @params/platform.${{ parameters.environmentName }}.json `
                      parKeyVaultCreateMode='recover'
                }
