parameters:
- name: dependsOn
  type: object
  default: []
- name: azureSubscription
  type: string
- name: environment
  type: string
- name: environmentName
  type: string
- name: environmentTag
  type: string

jobs:
- deployment: ValidateBicepAgainst${{ parameters.environmentName }}Environment
  dependsOn: ${{ parameters.dependsOn }}
  environment: ${{ parameters.environment }}

  workspace:
    clean: all

  strategy:
    runOnce:
      deploy:
        steps:
          - checkout: self

          - task: AzureCLI@2
            name: RunPreflightValidation
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                $deployPrincipalId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id
                $config = (Get-Content $(Build.sourcesDirectory)/params/platformKeyVault.${{ parameters.environmentTag }}.json | ConvertFrom-Json)

                az deployment sub validate `
                  --name 'strategicKeyVault${{ parameters.environmentName }}' `
                  --template-file bicep/platformKeyVault.bicep `
                  --location $config.parameters.parLocation.value `
                  --parameters @params/platformKeyVault.${{ parameters.environmentTag }}.json `
                      parKeyVaultCreateMode='recover' `
                      parDeployPrincipalId=$deployPrincipalId

                $keyVaults = az keyvault list --query '[].id' | ConvertFrom-Json
                $existing = $keyVaults | where {$_ -match "rg-platform-vault-${{ parameters.environmentTag }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

                if ($null -ne $existing) { 
                  az deployment sub validate `
                    --name 'strategicPlatform${{ parameters.environmentName }}' `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.parLocation.value `
                    --parameters @params/platform.${{ parameters.environmentTag }}.json `
                      parSqlAdminOid='00000000-0000-0000-0000-000000000000'
                }

          - task: AzureCLI@2
            name: RunWhatIfDeploy
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                $deployPrincipalId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id
                $config = (Get-Content $(Build.sourcesDirectory)/params/platformKeyVault.${{ parameters.environmentTag }}.json | ConvertFrom-Json)

                az deployment sub what-if `
                  --name 'strategicKeyVault${{ parameters.environmentName }}' `
                  --template-file bicep/platformKeyVault.bicep `
                  --location $config.parameters.parLocation.value `
                  --parameters @params/platformKeyVault.${{ parameters.environmentTag }}.json `
                      parKeyVaultCreateMode='recover' `
                      parDeployPrincipalId=$deployPrincipalId

                $keyVaults = az keyvault list --query '[].id' | ConvertFrom-Json
                $existing = $keyVaults | where {$_ -match "rg-platform-vault-${{ parameters.environmentTag }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

                if ($null -ne $existing) { 
                  az deployment sub what-if `
                    --name 'strategicPlatform${{ parameters.environmentName }}' `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.parLocation.value `
                    --parameters @params/platform.${{ parameters.environmentTag }}.json `
                      parSqlAdminOid='00000000-0000-0000-0000-000000000000'
                }
